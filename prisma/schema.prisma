// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id                String   @id @default(cuid())
  email             String   @unique
  username          String   @unique
  password          String
  firstName         String?
  lastName          String?
  avatar            String?
  role              UserRole @default(USER)
  subscriptionTier  SubscriptionTier @default(FREE)
  isActive          Boolean  @default(true)
  emailVerified     Boolean  @default(false)
  lastLoginAt       DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  blogPosts         BlogPost[]
  conversations     Conversation[]
  consultations     Consultation[]
  analytics         UserAnalytics[]
  preferences       UserPreferences?
  notifications     Notification[]

  @@map("users")
}

// Blog Content System
model BlogPost {
  id                String   @id @default(cuid())
  title             String
  slug              String   @unique
  content           String
  excerpt           String?
  featuredImage     String?
  status            PostStatus @default(DRAFT)
  publishedAt       DateTime?
  scheduledAt       DateTime?
  authorId          String
  author            User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  // SEO and Metadata
  metaTitle         String?
  metaDescription   String?
  keywords          String[]
  seoScore          Int?
  
  // Content Generation
  aiGenerated       Boolean  @default(false)
  promptUsed        String?
  writingStyle      String?
  targetAudience    String?
  contentTone       String?
  
  // Analytics
  views             Int      @default(0)
  likes             Int      @default(0)
  shares            Int      @default(0)
  comments          Int      @default(0)
  
  // Categories and Tags
  categories        Category[]
  tags              Tag[]
  
  // Social Media
  socialPosts       SocialPost[]
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("blog_posts")
}

model Category {
  id          String     @id @default(cuid())
  name        String     @unique
  slug        String     @unique
  description String?
  color       String?
  blogPosts   BlogPost[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("categories")
}

model Tag {
  id        String     @id @default(cuid())
  name      String     @unique
  slug      String     @unique
  blogPosts BlogPost[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("tags")
}

// AI Chat System
model Conversation {
  id          String   @id @default(cuid())
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  sessionId   String   @unique
  title       String?
  status      ConversationStatus @default(ACTIVE)
  messages    Message[]
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("conversations")
}

model Message {
  id             String   @id @default(cuid())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  role           MessageRole
  content        String
  attachments    String[]
  metadata       Json?
  createdAt      DateTime @default(now())

  @@map("messages")
}

// AI Tools Knowledge Base
model AITool {
  id              String   @id @default(cuid())
  name            String   @unique
  slug            String   @unique
  description     String
  category        String
  subcategory     String?
  website         String?
  pricing         Json?
  features        String[]
  useCases        String[]
  difficulty      Difficulty @default(BEGINNER)
  learningCurve   String?
  setupGuide      String?
  integration     String[]
  alternatives    String[]
  recommendations Recommendation[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("ai_tools")
}

model Recommendation {
  id        String   @id @default(cuid())
  toolId    String
  tool      AITool   @relation(fields: [toolId], references: [id], onDelete: Cascade)
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  score     Float
  reason    String?
  metadata  Json?
  createdAt DateTime @default(now())

  @@map("recommendations")
}

// Consultation System
model Consultation {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type        ConsultationType
  status      ConsultationStatus @default(PENDING)
  scheduledAt DateTime?
  duration    Int? // in minutes
  notes       String?
  outcome     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("consultations")
}

// Analytics and Performance
model UserAnalytics {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  event     String
  metadata  Json?
  timestamp DateTime @default(now())

  @@map("user_analytics")
}

model ContentAnalytics {
  id          String   @id @default(cuid())
  postId      String?
  event       String
  metadata    Json?
  timestamp   DateTime @default(now())

  @@map("content_analytics")
}

// Social Media Integration
model SocialPost {
  id        String   @id @default(cuid())
  postId    String
  post      BlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  platform  SocialPlatform
  content   String
  status    SocialPostStatus @default(DRAFT)
  publishedAt DateTime?
  analytics Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("social_posts")
}

// User Preferences and Settings
model UserPreferences {
  id                    String   @id @default(cuid())
  userId                String   @unique
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  writingStyle          Json?
  preferredTopics       String[]
  notificationSettings  Json?
  theme                 String   @default("dark")
  language              String   @default("en")
  timezone              String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("user_preferences")
}

// Notification System
model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      NotificationType
  title     String
  message   String
  read      Boolean  @default(false)
  metadata  Json?
  createdAt DateTime @default(now())

  @@map("notifications")
}

// Enums
enum UserRole {
  ADMIN
  MODERATOR
  USER
}

enum SubscriptionTier {
  FREE
  PREMIUM
  PRO
}

enum PostStatus {
  DRAFT
  PUBLISHED
  SCHEDULED
  ARCHIVED
}

enum ConversationStatus {
  ACTIVE
  ARCHIVED
  DELETED
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum ConsultationType {
  GENERAL
  TECHNICAL
  STRATEGY
  IMPLEMENTATION
}

enum ConsultationStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}

enum SocialPlatform {
  LINKEDIN
  TWITTER
  INSTAGRAM
  FACEBOOK
  YOUTUBE
}

enum SocialPostStatus {
  DRAFT
  SCHEDULED
  PUBLISHED
  FAILED
}

enum NotificationType {
  SYSTEM
  CONTENT
  CONSULTATION
  ANALYTICS
  SECURITY
}
